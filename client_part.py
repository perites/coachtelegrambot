import logging
import datetime

from telebot import types

import confg
import models
import shared_variables

from database import GroupSessionToClients, get_client_by_chat_id, get_group_type_sessions, get_group_session_by_id, \
    get_group_session_with_client, get_unique_dates, get_sessions_on_date, get_session_by_id, get_session_with_client

from shared_variables import SESSIONS_TYPE_FOR_WEEK
from tools import get_session_type_by_name, CustomException

import user_states


class ClientHandler:
    bot = None

    def __init__(self):
        self.match_case_dict = dict()

    def see_my_booked_session(self, message):
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("–ê—Ä—Ö—ñ–≤ —Å–µ—Å—ñ–π",
                                       callback_data=f"client;client_archive;")
        )

        client = get_client_by_chat_id(message.chat.id)
        text = '–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ —Å–µ—Å—ñ—ó: \n'

        client_sessions = list(filter(lambda n: n.status == 2, client.sessions))
        client_group_sessions = list(filter(lambda n: n.status in (2, 7, 8),
                                            map(lambda n: n.group_session, client.group_sessions)))

        if not client_sessions and not client_group_sessions:
            self.bot.send_message(message.chat.id, "–í–∏ —â–µ –Ω–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞–ª–∏ –∂–æ–¥–Ω–æ—ó —Å–µ—Å—ñ—ó", reply_markup=markup)
            return

        for session in client_sessions:
            text += f'{shared_variables.tx.session_representation_for_client(session, type_needed=True)}'

        text += '\n\n–°–µ—Å—ñ—ó –≥—Ä—É–ø–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É:\n'
        for group_session in client_group_sessions:
            text += f"{shared_variables.tx.group_session_representation_for_client(group_session)}"

        self.bot.send_message(message.chat.id, text, reply_markup=markup)

    def book_group_session(self, message):
        text, markup = self._book_group_session_parts()
        self.bot.send_message(message.chat.id, text=text, reply_markup=markup)

    @staticmethod
    def _book_group_session_parts():
        text = '''
    –ú–∞—Å—Ç–µ—Ä–º–∞–π–Ω–¥ (–ú–ú) ‚Äî —Ü–µ –ø–æ—Ç—É–∂–Ω–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è —Ç–∞ —Ä–æ–∑–≤–∏—Ç–∫—É. –ú–µ—Ç–∞ ‚Äî –¥–æ–ø–æ–º–æ–≥—Ç–∏ —É—á–∞—Å–Ω–∏–∫–∞–º —Ä–æ–∑–≤–∏–≤–∞—Ç–∏ —Å–≤–æ—ó –Ω–∞–≤–∏—á–∫–∏ —Ç–∞ –∑–Ω–∞–Ω–Ω—è –≤ –ø–µ–≤–Ω—ñ–π –≥–∞–ª—É–∑—ñ —á–µ—Ä–µ–∑ –æ–±–º—ñ–Ω –¥–æ—Å–≤—ñ–¥–æ–º —Ç–∞ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –≥—Ä—É–ø–∏ ‚ù§Ô∏è


    –ì—Ä—É–ø–æ–≤–∏–π –∫–æ—É—á–∏–Ω–≥ –∑–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ ICF (–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∞ —Ñ–µ–¥–µ—Ä–∞—Ü—ñ—è –∫–æ—É—á–∏–Ω–≥—É) —î –ø—ñ–¥—Ö–æ–¥–æ–º –≤ –∫–æ—É—á–∏–Ω–≥—É, —è–∫–∏–π –∑–æ—Å–µ—Ä–µ–¥–∂—É—î—Ç—å—Å—è –Ω–∞ —Ä–æ–∑–≤–∏—Ç–∫—É —ñ –ø—ñ–¥—Ç—Ä–∏–º—Ü—ñ –≥—Ä—É–ø–∏ –ª—é–¥–µ–π –¥–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —ó—Ö–Ω—ñ—Ö –æ—Å–æ–±–∏—Å—Ç–∏—Ö —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏—Ö —Ü—ñ–ª–µ–π. –í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç–∏ –Ω–∞ –∑—É—Å—Ç—Ä—ñ—á —ñ–∑ –±—É–¥—å-—è–∫–∏–º –∑–∞–ø–∏—Ç–æ–º, —è–∫–∏–π –ø—Ä—è–º–æ —á–∏ –æ–ø–æ—Å–µ—Ä–µ–¥–∫–æ–≤–∞–Ω–æ –≤—ñ–¥–Ω–æ—Å–∏—Ç—å—Å—è –¥–æ –æ—Å–Ω–æ–≤–Ω–æ—ó —Ç–µ–º–∏ –∑—É—Å—Ç—Ä—ñ—á—ñ —Ç–∞ –∑–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è, –ø–æ–±–∞—á–∏—Ç–∏ –Ω–æ–≤—ñ —Ä—ñ—à–µ–Ω–Ω—è, –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ—Å—É—Ä—Å –¥–ª—è –¥—ñ–π üåø

    –§–æ–∫—É—Å –≤ –≥—Ä—É–ø–æ–≤–æ–º—É –Ω–µ –Ω–∞ –¥—É–º–∫–∏ —ñ–Ω—à–∏—Ö, –∞ –Ω–∞ —Ä–æ–±–æ—Ç—É –∑ –≤–ª–∞—Å–Ω–∏–º –º–∏—Å–ª–µ–Ω–Ω—è–º —á–µ—Ä–µ–∑ –ø–∏—Ç–∞–Ω–Ω—è, –∑ —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ç–µ, —è–∫ —Ö–æ—á–µ —É—á–∞—Å–Ω–∏–∫, —ñ –±–æ–Ω—É—Å–æ–º —î –¥—É–º–∫–∏ —ñ–Ω—à–∏—Ö –ø–æ —ó—Ö –≤–ª–∞—Å–Ω–∏–º –∑–∞–ø–∏—Ç–∞–º, —â–æ —Ä–æ–∑—à–∏—Ä—é—î —É—Å–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üí°
    '''

        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –º–∞–π—Å—Ç–µ—Ä–º–∞–π–¥–Ω",
                                       callback_data=f"client;group_week;;mm")
        )
        markup.add(
            types.InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –≥—Ä—É–ø–æ–≤—É —Å–µ—Å—ñ—é",
                                       callback_data=f"client;group_week;;group")
        )

        return text, markup

    def client_see_sessions_types(self, message):
        text, markup = self._client_see_sessions_types_parts()
        self.bot.send_message(message.chat.id, text, reply_markup=markup)

    @staticmethod
    def _client_see_sessions_types_parts():
        text = """
        –ó–∞—Ä–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–∞–∫—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–æ—É—á–∏–Ω–≥—É:
        """

        markup = types.InlineKeyboardMarkup(row_width=2)
        for session_type in SESSIONS_TYPE_FOR_WEEK:
            text += f'{session_type.info_text}\n'
            button_text, if_enough_sessions = session_type.button_text()
            if if_enough_sessions:
                markup.add(
                    types.InlineKeyboardButton(button_text,
                                               callback_data=f"client;solo_week;{session_type.type_name}")
                )
            elif not if_enough_sessions:
                markup.add(
                    types.InlineKeyboardButton(button_text,
                                               callback_data=f"client;no_sessions;{session_type.type_name}")
                )

        return text, markup

    def process_client_contact(self, message, is_contact):
        if is_contact:
            contact = message.contact.phone_number
        elif not is_contact:
            contact = message.text
        else:
            raise CustomException("Wrong value of is_contact, wrong call")

        client = models.Client.create(
            chat_id=message.chat.id,
            username=f"None-{message.chat.id}",
            full_name=message.from_user.full_name
        )

        client.contact = contact
        client.save()

        print(
            f"New client WITHOUT USERNAME was added to db: {client.username} ({client.contact}) with chat_id {client.chat_id}")
        logging.info(
            f"New client WITHOUT USERNAME was added to db: {client.username} ({client.contact}) with chat_id {client.chat_id}")

        text = f'''
–î—è–∫—É—î–º–æ, –≤–∞—à —Å–ø–æ—Å—ñ–± –∑'–≤—è–∑–∫—É –±—É–ª–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! 
–°–ø–æ—Å—ñ–± –∑'–≤—è–∑–∫—É : {shared_variables.tx.unmarkdown(client.contact)}
–ë—É–¥—å –ª–∞—Å–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –∫–æ–º–∞–Ω–¥—É /start —â–µ —Ä–∞–∑ —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º
        '''
        self.bot.send_message(message.chat.id, text=text)


class ClientCallbackHandler(ClientHandler):
    def __init__(self):
        super().__init__()
        self.match_case_dict = {
            "client_archive": self.client_archive_callback_handler,

            # client book group session
            "group_week": self.group_week_callback_handler,
            "back_to_groups_types": self.back_to_groups_types_callback_handler,
            "group_session": self.group_session_callback_handler,
            "group_confirm": self.group_confirm_callback_handler,

            # client book solo session
            "no_sessions": self.no_sessions_callback_handler,
            "solo_week": self.solo_week_callback_handler,
            "back_to_sessions_type": self.back_to_sessions_type_callback_handler,
            "solo_date": self.solo_date_callback_handler,
            "solo_session": self.solo_session_callback_handler,
            "solo_confirm": self.solo_confirm_callback_handler

        }

    def client_archive_callback_handler(self, call):

        chat_id = call.chat_id
        message_id = call.message_id

        text = "–í—Å—ñ –≤–∞—à—ñ —Å–µ—Å—ñ—ó —è–∫—ñ –≤—ñ–¥–±—É–ª–∏—Å—è:\n"

        client = get_client_by_chat_id(chat_id)
        client_sessions = list(filter(lambda n: n.status == 3, client.sessions))
        client_group_sessions = list(filter(lambda n: n.status == 3,
                                            map(lambda n: n.group_session, client.group_sessions)))

        if not client_sessions and not client_group_sessions:
            self.bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                       text="–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó —Å–µ—Å—ñ—ó —è–∫–∞ –≤—ñ–¥–±—É–ª–∞—Å—å")
            return

        text += '–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ —Å–µ—Å—ñ—ó:\n'
        for session in client_sessions:
            text += f'{shared_variables.tx.session_representation_for_client(session, type_needed=True)}'

        text += '\n\n–°–µ—Å—ñ—ó –≥—Ä—É–ø–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É:\n'
        for group_session in client_group_sessions:
            text += f"{shared_variables.tx.group_session_representation_for_client(group_session)}"

        self.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text)

    def group_week_callback_handler(self, call):
        chat_id = call.chat_id
        message_id = call.message_id
        group_type = call.additional_info

        sessions = get_group_type_sessions(group_type)
        if not sessions:
            text = f'''
           –ù–∞ –∂–∞–ª—å, –≤—Å—ñ –º—ñ—Å—Ü—è –Ω–∞ –≥—Ä—É–ø–æ–≤—ñ –ø–æ–¥—ñ—ó –≤–∂–µ –∑–∞–π–Ω—è—Ç—ñ. –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ç–µ–º—É –≥—Ä—É–ø–æ–≤–æ—ó —Ä–æ–±–æ—Ç–∏ –∑–∞ –î–æ–Ω–∞—Ç –≤—ñ–¥ 200 –≥—Ä–Ω –Ω–∞ —Ñ–æ–Ω–¥ –ø—Ä–æ—î–∫—Ç—É ICFcoaching for¬†WinE. –ì—Ä–æ—à—ñ —Ñ–æ–Ω–¥—É –±—É–¥—É—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ñ –Ω–∞ —Ä–æ–∑–≤–∏—Ç–æ–∫ –ø—Ä–æ—î–∫—Ç—É!

           –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –º–æ–∂–Ω–∞ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: [–ø–æ—Å–∏–ª–∞–Ω–Ω—è](https://forms.gle/SLyN6LpbZ1vfCA9M9)
                           '''
            self.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text)
            return
        markup = types.InlineKeyboardMarkup(row_width=1)
        for session in sessions:
            markup.add(
                types.InlineKeyboardButton(shared_variables.tx.button_group_sessions_representation(session),
                                           callback_data=f"client;group_session;{session.id};{group_type}")
            )
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥",
                                              callback_data=f'client;back_to_groups_types'))

        text = "–î–æ—Å—Ç—É–ø–Ω—ñ –ø–æ–¥—ñ—ó –∑ "
        text += "–ú–∞–π—Å—Ç–µ—Ä –º–∞–π–Ω–¥—É" if group_type == "mm" else "–≥—Ä—É–ø–æ–≤–æ–≥–æ –∫–æ—É—á–∏–Ω–≥—É"

        self.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text,
                                   reply_markup=markup)

    def back_to_groups_types_callback_handler(self, call):
        chat_id = call.chat_id
        message_id = call.message_id

        text, markup = self._book_group_session_parts()
        self.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, reply_markup=markup)

    def group_session_callback_handler(self, call):
        chat_id = call.chat_id
        message_id = call.message_id
        data = call.data
        group_type = call.additional_info

        session = get_group_session_by_id(data)
        client = get_client_by_chat_id(chat_id)

        if get_group_session_with_client(client, group_type):
            text = f"""
           –í–∏ –≤–∂–µ —Å–∫–æ—Ä–∏—Å—Ç–∞–ª–∏—Å—è –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ—é –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –∑ –≥—Ä—É–ø–æ–≤–æ–≥–æ –∫–æ—É—á–∏–Ω–≥—É –∞–±–æ –º–∞—Å—Ç–µ—Ä–º–∞–π–Ω–¥—É. –£ –≤–∞—Å —î  –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ç–µ–º—É –≥—Ä—É–ø–æ–≤–æ—ó —Ä–æ–±–æ—Ç–∏ –∑–∞ –î–æ–Ω–∞—Ç –≤—ñ–¥ 200 –≥—Ä–Ω –Ω–∞ —Ñ–æ–Ω–¥ –ø—Ä–æ—î–∫—Ç—É ICFcoaching for¬†WinE. –ì—Ä–æ—à—ñ —Ñ–æ–Ω–¥—É –±—É–¥—É—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ñ –Ω–∞ —Ä–æ–∑–≤–∏—Ç–æ–∫ –ø—Ä–æ—î–∫—Ç—É!

           –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –º–æ–∂–Ω–∞ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: [–ø–æ—Å–∏–ª–∞–Ω–Ω—è](https://forms.gle/SLyN6LpbZ1vfCA9M9)
           """
            self.bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                       text=text)
            return

        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton(text="–¢–∞–∫", callback_data=f'client;group_confirm;{session.id};{group_type}'))
        markup.add(types.InlineKeyboardButton(text="–ù—ñ, —è –∑–º—ñ–Ω–∏–≤ —Å–≤–æ—é –¥—É–º–∫—É",
                                              callback_data=f'client;group_week;;{group_type}'))

        text = "–í–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–π–Ω—è—Ç–∏ —É—á–∞—Å—Ç—å –≤ —Ü—ñ–π —Å–µ—Å—ñ—ó?\n"
        text += f"\n*–¢–∏–ø –ø–æ–¥—ñ—ó*: "
        text += "–ú–∞–π—Å—Ç–µ—Ä–º–∞–π–Ω–¥\n" if group_type == "mm" else "–ì—Ä—É–ø–æ–≤–∏–π –∫–æ—É—á–∏–Ω–≥\n"

        text += shared_variables.tx.group_session_representation_for_client(session)
        self.bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                   text=text,
                                   reply_markup=markup)

    def group_confirm_callback_handler(self, call):
        chat_id = call.chat_id
        message_id = call.message_id
        data = call.data
        group_type = call.additional_info

        client = get_client_by_chat_id(chat_id)
        session = get_group_session_by_id(data)
        gs_to_client = GroupSessionToClients.create(client=client,
                                                    group_session=session,
                                                    booked_at=datetime.datetime.now(confg.KYIV_TZ))

        session.status = 7
        amount_session_clients = len(session.clients)
        if amount_session_clients >= confg.MIN_AMOUNT_FOR_GROUP_SESSION:
            session.status = 8

            logging.info(f"Session with id {session.id} has more than {confg.MIN_AMOUNT_FOR_GROUP_SESSION} clients")

        if amount_session_clients == session.max_participants:
            session.status = 2

            logging.info(
                f"Session with id {session.id} has {session.max_participants} clients, now unavailable for booking")

        session.save()

        text = "–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–±—Ä–æ–Ω—é–≤–∞–ª–∏ —Å–µ—Å—ñ—é!\n\n"
        text += shared_variables.tx.group_session_representation_for_client(session)
        self.bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                   text=text)

        text = shared_variables.tx.notify_coach_session_booked(session, client, group=True)
        self.bot.send_message(chat_id=session.coach.chat_id,
                              text=text)

        print(
            f"{client.username} booked {group_type} session_id {session.id} at {gs_to_client.booked_at} with {session.coach.full_name}")
        logging.info(
            f"{client.username} booked {group_type} session_id {session.id} at {gs_to_client.booked_at} with {session.coach.full_name}")

    def no_sessions_callback_handler(self, call):
        chat_id = call.chat_id
        message_id = call.message_id
        data = call.data

        session_type = get_session_type_by_name(data)
        client = get_client_by_chat_id(chat_id)

        print(
            f'Client {client.username} (id:{client.id}) was TRYING to book session (type:{session_type}), but no sessions left'
        )
        logging.info(
            f'Client {client.username} (id:{client.id}) was TRYING to book session (type:{session_type}), but no sessions left')

        self.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=session_type.no_session_text)

    def solo_week_callback_handler(self, call):
        chat_id = call.chat_id
        message_id = call.message_id
        data = call.data

        shared_variables.USER_STATES[chat_id] = user_states.WantToBookSessionType(
            get_session_type_by_name(data))
        markup = types.InlineKeyboardMarkup(row_width=1)
        for date in get_unique_dates():
            markup.add(
                types.InlineKeyboardButton(shared_variables.tx.date_representation(date.date),
                                           callback_data=f"client;solo_date;{date.date}")
            )
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥",
                                              callback_data=f'client;back_to_sessions_type'))
        self.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="–î–æ—Å—Ç—É–ø–Ω—ñ –¥–∞—Ç–∏: ", reply_markup=markup)

    def back_to_sessions_type_callback_handler(self, call):
        chat_id = call.chat_id
        message_id = call.message_id

        text, markup = self._client_see_sessions_types_parts()
        self.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, reply_markup=markup)

    def solo_date_callback_handler(self, call):
        chat_id = call.chat_id
        message_id = call.message_id
        data = call.data

        markup = types.InlineKeyboardMarkup(row_width=1)

        sessions = get_sessions_on_date(data)
        if not sessions:
            raise CustomException(f"No sessions on this date: {data}", chat_id)
        for session in sessions:
            markup.add(
                types.InlineKeyboardButton(f"{session.coach.full_name} "
                                           f"{session.starting_time:{shared_variables.tx.time_format}}",
                                           callback_data=f"client;solo_session;{session.id}")
            )

        user_state = shared_variables.USER_STATES.get(chat_id)
        if not user_state:
            raise CustomException(f"No state associated with this chat_id", chat_id)
        back_button = types.InlineKeyboardButton("–ù–∞–∑–∞–¥",
                                                 callback_data=f'client;solo_week;{user_state.session_type.type_name}')
        markup.add(back_button)

        self.bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                   text=f"–í–∏–±–µ—Ä—ñ—Ç—å —Å–µ—Å—ñ—é —É {shared_variables.tx.date_representation(sessions[0].date, True)}",
                                   reply_markup=markup)

    def solo_session_callback_handler(self, call):
        chat_id = call.chat_id
        message_id = call.message_id
        data = call.data

        session = get_session_by_id(data)
        client = get_client_by_chat_id(chat_id)

        user_state = shared_variables.USER_STATES.get(chat_id)
        if not user_state:
            raise CustomException(f"No state associated with this chat_id", chat_id)
        session_type = user_state.session_type
        if get_session_with_client(client, session_type):
            text = f"""
        –í–∏ –≤–∂–µ —Ä–∞–Ω—ñ—à–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞–ª–∏ —á–∏ –≤—ñ–¥–≤—ñ–¥–∞–ª–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—É —Å–µ—Å—ñ—é —Ü—å–æ–≥–æ —Ç–∏–ø—É, *—Å–µ—Å—ñ—è –ù–ï –±—É–ª–∞ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–∞*.
        –í–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–µ—Å—ñ—é –∑–∞ –¥–æ–Ω–∞—Ç, –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–ª–∏—à—Ç–µ –∑–∞—è–≤–∫—É –≤ —Ñ–æ—Ä–º—ñ:
        [–ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–æ—Ä–º—É]({confg.BOOK_SESSION_LINK})
        """
            self.bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                       text=text)
            return

        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(types.InlineKeyboardButton(text="–¢–∞–∫", callback_data=f'client;solo_confirm;{session.id}'))
        markup.add(types.InlineKeyboardButton(text="–ù—ñ, —è –∑–º—ñ–Ω–∏–≤ —Å–≤–æ—é –¥—É–º–∫—É",
                                              callback_data=f'client;solo_date;{session.date}'))

        text = "–í–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Ü—é —Å–µ—Å—ñ—é?\n"

        user_state = shared_variables.USER_STATES.get(chat_id)
        if not user_state:
            raise CustomException(f"No state associated with this chat_id", chat_id)
        text += f"\n*–¢–∏–ø –∫–æ—É—á—ñ–Ω–≥—É*: {user_state.session_type.ukr_name}\n"

        text += shared_variables.tx.session_representation_for_client(session)
        self.bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                   text=text,
                                   reply_markup=markup)

    def solo_confirm_callback_handler(self, call):
        chat_id = call.chat_id
        message_id = call.message_id
        data = call.data

        client = get_client_by_chat_id(chat_id)

        session = get_session_by_id(data)
        session.client = client
        user_state = shared_variables.USER_STATES.get(chat_id)
        if not user_state:
            raise CustomException(f"No state associated with this chat_id", chat_id)
        session.type = user_state.session_type.type_name
        session.status = 2
        session.booked_at = datetime.datetime.now(confg.KYIV_TZ)
        session.save()

        text = "–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–±—Ä–æ–Ω—é–≤–∞–ª–∏ —Å–µ—Å—ñ—é!"
        text += shared_variables.tx.session_representation_for_client(session)
        self.bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                   text=text, )

        text = shared_variables.tx.notify_coach_session_booked(session)
        self.bot.send_message(chat_id=session.coach.chat_id,
                              text=text)

        print(
            f"{client.username} booked session {session.id} at {session.booked_at} with {session.coach.full_name}")
        logging.info(
            f"{client.username} booked session_id {session.id} at {session.booked_at} with {session.coach.full_name}")
