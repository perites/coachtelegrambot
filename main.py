import datetime
import logging
import threading
import time

from telebot import types

import confg
import shared_variables

from tools import error_catcher, CallbackHandler, error_logger
from database import get_client_by_chat_id, get_coach_by_username, get_all_booked_session_with_coach, \
    get_client_by_username

from client_part import ClientHandler, ClientCallbackHandler
from coach_part import CoachHandler, CoachCallbackHandler

from models import Client
import my_scheduler
import user_states

ClientHandler.bot = shared_variables.bot
client_handler = ClientHandler()

CoachHandler.bot = shared_variables.bot
coach_handler = CoachHandler()

CallbackHandler.callers = {
    "client": ClientCallbackHandler(),
    "coach": CoachCallbackHandler()
}


@shared_variables.bot.message_handler(commands=['start'])
@error_catcher
def start(message: types.Message):
    if shared_variables.USER_STATES.get(message.chat.id):
        del shared_variables.USER_STATES[message.chat.id]

        print(f"States were cleaned for {message.chat.id}")
        logging.info(f"States were cleaned for {message.chat.id}")

    client = get_client_by_chat_id(message.chat.id) or get_client_by_username(message.from_user.username)

    if not client:
        if not message.from_user.username:
            text = '''
–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–±–æ —Å–∫—Ä–∏—Ç–∏–π –Ω—ñ–∫ —Ç–µ–ª–µ–≥—Ä–∞–º—É —ñ –≤ —Ä–∞–∑—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∫–æ—É—á –Ω–µ –∑–º–æ–∂–µ –∑–≤'—è—Ç–∏—Å—å –∑ –≤–∞–º–∏

–ë—É–¥—å –ª–∞—Å–∫–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É " –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É " –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –∑—Ä—É—á–Ω–∏–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å—ñ–± –∑–≤'—è–∑–∫—É
(–±—É–¥—å —è–∫–∏–π —Å–ø–æ—Å—ñ–± —è–∫–∏–π –≤–∞–º –∑—Ä—É—á–Ω–∏–π: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞, –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —ñ–Ω—Å—Ç–∞–≥—Ä–∞–º —ñ —Ç–¥.) 
'''
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            button = types.KeyboardButton("–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)
            markup.add(button)

            shared_variables.USER_STATES[message.chat.id] = user_states.WaitingForClientContact()

            shared_variables.bot.send_message(message.chat.id,
                                              text=text,
                                              reply_markup=markup)

            return

        client = Client.create(
            chat_id=message.chat.id,
            username=message.from_user.username,
            full_name=message.from_user.full_name
        )

        print(f"New client was added to db: {client.username} with chat_id {client.chat_id}")
        logging.info(f"New client was added to db: {client.username} with chat_id {client.chat_id}")
    else:
        client.chat_id = message.chat.id
        client.save()
        print(f"Client {client.username} ({client.contact}) was updatated with chat_id: {client.chat_id}")
        logging.info(f"Client {client.username} ({client.contact}) was updatated with chat_id: {client.chat_id}")

    if coach := get_coach_by_username(message.from_user.username):
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(types.KeyboardButton("–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –º–æ—ó –∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó"))
        markup.add(types.KeyboardButton("–ê—Ä—Ö—ñ–≤ —Å–µ—Å—ñ–π"))
        markup.add(types.KeyboardButton("–ü–æ–¥—è–∫—É–≤–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç—É ‚ù§Ô∏è"))

        print(f"{message.from_user.username} ({client.contact}) was authorized as coach")
        logging.info(f"{message.from_user.username} ({client.contact}) was authorized as coach")

        coach.chat_id = message.chat.id
        coach.save()

        text = (f"–í—ñ—Ç–∞—î–º–æ, {coach.full_name}.\n"
                f"–í–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞–ª–∏—Å—å —è–∫ –∫–æ—É—á")
        shared_variables.bot.send_message(message.chat.id, text, reply_markup=markup)

        if sessions := get_all_booked_session_with_coach(coach):

            for session in sessions:
                text = shared_variables.tx.notify_coach_session_booked(session)
                shared_variables.bot.send_message(chat_id=session.coach.chat_id,
                                                  text=text)

        return

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add(types.KeyboardButton("–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ —Å–µ—Å—ñ—ó"))
    markup.add(types.KeyboardButton("–ì—Ä—É–ø–æ–≤—ñ —Ñ–æ—Ä–º–∞—Ç–∏"))
    markup.add(types.KeyboardButton("–ú–æ—ó –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω—ñ —Å–µ—Å—ñ—ó"))
    markup.add(types.KeyboardButton("–ü–æ–¥—è–∫—É–≤–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç—É ‚ù§Ô∏è"))

    print(f"{message.from_user.username} was authorized as user")
    logging.info(f"{message.from_user.username} was authorized as user")

    text = """
–í—ñ—Ç–∞—î–º–æ —Ç–µ–±–µ –≤ –ø—Ä–æ—Å—Ç–æ—Ä—ñ –ø—Ä–æ—î–∫—Ç—É ICFcoaching for WinE!

–¶–µ –ø—Ä–æ—Å—Ç—ñ—Ä –∫–æ—É—á–∏–Ω–≥–æ–≤–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —ñ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ —Ä–æ–∑–≤–∏—Ç–∫—É.

–¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ –∫–æ—É—á —Å–µ—Å—ñ—ó, –∞ —Ç–∞–∫–æ–∂ –Ω–∞ –≥—Ä—É–ø–æ–≤—ñ —Ñ–æ—Ä–º–∞—Ç–∏ —Ä–æ–±–æ—Ç–∏ –¥–æ –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª—ñ–≤ ICF!
"""

    shared_variables.bot.send_message(message.chat.id, text, reply_markup=markup)


@shared_variables.bot.message_handler(content_types=['contact'])
@error_catcher
def process_client_contact(message: types.Message):
    client_handler.process_client_contact(message, is_contact=True)


@shared_variables.bot.message_handler(func=lambda message: isinstance(shared_variables.USER_STATES.get(message.chat.id),
                                                                      user_states.WaitingForClientContact))
@error_catcher
def process_client_contact(message: types.Message):
    client_handler.process_client_contact(message, is_contact=False)


@shared_variables.bot.callback_query_handler(func=lambda call: call)
@error_catcher
def handle_callback_query(call):
    call_handler = CallbackHandler(call)
    call_handler.handle_caller()


@shared_variables.bot.message_handler(func=lambda message: message.text == "–ü–æ–¥—è–∫—É–≤–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç—É ‚ù§Ô∏è")
@error_catcher
def see_my_session(message):
    text = ''' 
–î—è–∫—É—î–º–æ –≤–∞–º! –¢–∞–∫—ñ –ø—Ä–æ—è–≤–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –¥—É–∂–µ –≤–∞–∂–ª–∏–≤—ñ –¥–ª—è –Ω–∞—Å, –¥–∞—é—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, —â–æ –º–∏ —Ä–æ–±–∏–º–æ –¥—ñ–π—Å–Ω–æ –∫–æ—Ä–∏—Å–Ω—É —Å–ø—Ä–∞–≤—É —ñ –Ω–∞–¥–∏—Ö–∞—é—Ç—å —Ä—É—Ö–∞—Ç–∏—Å—è –¥–∞–ª—ñ —ñ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ —Ü—ñ–∫–∞–≤—ñ —ñ–¥–µ—ó –¥–ª—è –≤–∞—Å –≤ —Ü—å–æ–º—É –ø—Ä–æ—Å—Ç–æ—Ä—ñ!

–ó–≤–µ—Ä—Ç–∞—î–º–æ –≤–∞—à—É —É–≤–∞–≥—É, —â–æ –∑–∞ –¥–æ–Ω–∞—Ç –≤—ñ–¥ 20 –≥—Ä–Ω –≤–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É –¥–ª—è –≤–∞—Å –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–Ω—É –∫–∞—Ä—Ç—É!
'''

    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –±–∞–Ω–∫—É üçØü´ô", url=confg.DONATE_URL),
    )

    shared_variables.bot.send_message(message.chat.id, text, reply_markup=markup)


# Coach part
@shared_variables.bot.message_handler(func=lambda message: message.text == "–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –º–æ—ó –∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó")
@error_catcher
def see_my_session(message):
    coach_handler.see_my_session(message)


@shared_variables.bot.message_handler(func=lambda message: message.text == "–ê—Ä—Ö—ñ–≤ —Å–µ—Å—ñ–π")
@error_catcher
def coach_archive(message):
    coach_handler.coach_archive(message)


@shared_variables.bot.message_handler(func=lambda message: isinstance(shared_variables.USER_STATES.get(message.chat.id),
                                                                      user_states.WaitingForCoachSessionNote))
@error_catcher
def process_session_notes(message: types.Message):
    coach_handler.process_session_notes(message)


# Client part
@shared_variables.bot.message_handler(func=lambda message: message.text == "–ú–æ—ó –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω—ñ —Å–µ—Å—ñ—ó")
@error_catcher
def see_my_booked_session(message: types.Message):
    client_handler.see_my_booked_session(message)


@shared_variables.bot.message_handler(func=lambda message: message.text == "–ì—Ä—É–ø–æ–≤—ñ —Ñ–æ—Ä–º–∞—Ç–∏")
@error_catcher
def book_group_session(message):
    client_handler.book_group_session(message)


@shared_variables.bot.message_handler(func=lambda message: message.text == "–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ —Å–µ—Å—ñ—ó")
@error_catcher
def client_see_sessions_types(message):
    client_handler.client_see_sessions_types(message)


def run_bot_pulling():
    global BOT_RUNNING
    try:
        print(f"now:{datetime.datetime.now()} kyiv tz: {datetime.datetime.now(confg.KYIV_TZ)} --- starting bot")
        BOT_RUNNING = True
        shared_variables.bot.polling(non_stop=True)

    except Exception as bot_error:
        print(f"BOT STOPPED WORKING | INITIALIZING RESTARTING | ERROR : {bot_error} ")
        error_logger.fatal(f"BOT STOPPED WORKING | INITIALIZING BOT RESTARTING | ERROR : {bot_error} ")
        BOT_RUNNING = False


def run_run_scheduler():
    global SCHEDULER_RUNNING
    try:
        print(f"now:{datetime.datetime.now()} kyiv tz: {datetime.datetime.now(confg.KYIV_TZ)} --- starting scheduler")
        SCHEDULER_RUNNING = True
        my_scheduler.run_scheduler()

    except Exception as scheduler_error:
        print(f"SCHEDULER STOPPED WORKING | INITIALIZING SCHEDULER RESTARTING | ERROR : {scheduler_error} ")
        error_logger.fatal(
            f"SCHEDULER STOPPED WORKING | INITIALIZING SCHEDULER RESTARTING | ERROR : {scheduler_error} ")
        SCHEDULER_RUNNING = False


def start_program():
    global BOT_RUNNING, SCHEDULER_RUNNING
    while True:
        if not BOT_RUNNING:
            start_bot_thread = threading.Thread(target=run_bot_pulling)
            start_bot_thread.start()
        if not SCHEDULER_RUNNING:
            run_scheduler_thread = threading.Thread(target=run_run_scheduler)
            run_scheduler_thread.start()

        time.sleep(1)


if __name__ == '__main__':
    BOT_RUNNING = False
    SCHEDULER_RUNNING = False
    try:
        start_program()
    except Exception as program_error:
        error_logger.fatal(f"PROGRAM STOPPED WORKING| CANT RESTART | FATAL ERROR : {program_error}")
